function rollDice() {
  const messageElem = document.getElementById("message");
  const button = document.getElementById("roll-button");
  const area = document.getElementById("dice-area");

  // B·∫Øt ƒë·∫ßu tr·∫°ng th√°i l·∫Øc
  messageElem.textContent = "ƒêang l·∫Øc...";
  messageElem.classList.remove("tai", "xiu");
  button.disabled = true;

  // Xo√° x√∫c x·∫Øc v√† b√°t c≈© n·∫øu c√≥
  area.querySelectorAll(".dice").forEach(d => d.remove());
  const oldBowl = document.getElementById("bowl");
  if (oldBowl) oldBowl.remove();

  // T·∫°o b√°t NGAY L·∫¨P T·ª®C nh∆∞ng CH∆ØA cho k√©o
  const bowl = document.createElement("img");
  bowl.src = "bat.png";
  bowl.id = "bowl";
  bowl.style.position = "absolute";
  bowl.style.left = "0";
  bowl.style.top = "0";
  bowl.style.cursor = "not-allowed"; // ƒë·ªïi con tr·ªè cho r√µ l√† ch∆∞a ƒë∆∞·ª£c k√©o
  area.appendChild(bowl);

  // Sau 5s m·ªõi sinh x√∫c x·∫Øc v√† cho k√©o b√°t
  const taiChance = parseInt(document.getElementById("prob-slider").value);
  let total;
  if (Math.random() * 100 < taiChance) {
    do {
      total = 0;
      for (let j = 0; j < 3; j++) {
        total += Math.floor(Math.random() * 6) + 1;
      }
    } while (total <= 10);
  } else {
    do {
      total = 0;
      for (let j = 0; j < 3; j++) {
        total += Math.floor(Math.random() * 6) + 1;
      }
    } while (total > 10);
  }

  const diceValues = generateDiceFromTotal(total);

  setTimeout(() => {
    // Hi·ªán x√∫c x·∫Øc
    for (let i = 0; i < 3; i++) {
      const num = diceValues[i];
      const dice = document.createElement("img");
      dice.src = `${num}.png`;
      dice.classList.add("dice");

      const areaSize = 300;
      const usableRatio = 0.5;
      const usableSize = areaSize * usableRatio;
      const margin = (areaSize - usableSize) / 2;
      const posX = margin + Math.random() * (usableSize - 60);
      const posY = margin + Math.random() * (usableSize - 60);

      dice.style.position = "absolute";
      dice.style.left = `${posX}px`;
      dice.style.top = `${posY}px`;

      area.appendChild(dice);
      makeDraggableDice(dice);
    }

    // B·∫≠t l·∫°i kh·∫£ nƒÉng k√©o b√°t
    bowl.style.cursor = "grab";
    makeDraggableBowl(bowl);

    // Cho ng∆∞·ªùi ch∆°i k√©o m·ªü b√°t
    button.disabled = false;
    messageElem.textContent = ""; // ho·∫∑c gi·ªØ nguy√™n n·∫øu b·∫°n mu·ªën h·ªç ph·∫£i m·ªü b√°t m·ªõi th·∫•y k·∫øt qu·∫£
  }, 5000);
}





// H√†m cho ph√©p k√©o t·ª± do b√°t (kh√¥ng gi·ªõi h·∫°n)
function makeDraggableBowl(elem) {
  let offsetX = 0, offsetY = 0;
  let isDragging = false;

  elem.style.cursor = "grab";

  elem.addEventListener("mousedown", startDrag);
  elem.addEventListener("touchstart", startDrag, { passive: false });

  function startDrag(e) {
    e.preventDefault();
    isDragging = true;
    elem.style.cursor = "grabbing";

    // L·∫•y v·ªã tr√≠ con tr·ªè chu·ªôt ho·∫∑c ch·∫°m
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    const clientY = e.touches ? e.touches[0].clientY : e.clientY;

    // L·∫•y bounding rect c·ªßa element (v·ªã tr√≠ tuy·ªát ƒë·ªëi tr√™n viewport)
    const rect = elem.getBoundingClientRect();

    // T√≠nh offset = kho·∫£ng c√°ch con tr·ªè chu·ªôt so v·ªõi g√≥c tr√™n tr√°i c·ªßa ·∫£nh
    offsetX = clientX - rect.left;
    offsetY = clientY - rect.top;

    // ƒêƒÉng k√Ω event listener tr√™n document ƒë·ªÉ theo d√µi k√©o chu·ªôt/di chuy·ªÉn
    document.addEventListener("mousemove", onDrag);
    document.addEventListener("mouseup", stopDrag);
    document.addEventListener("touchmove", onDrag, { passive: false });
    document.addEventListener("touchend", stopDrag);
  }


    function onDrag(e) {
    if (!isDragging) return;

    e.preventDefault();

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    const clientY = e.touches ? e.touches[0].clientY : e.clientY;

    const area = document.getElementById("dice-area");
    const rect = area.getBoundingClientRect();

    let newLeft = clientX - rect.left - offsetX;
    let newTop = clientY - rect.top - offsetY;

    elem.style.position = "absolute";
    elem.style.left = `${newLeft}px`;
    elem.style.top = `${newTop}px`;

    // L·∫•y bounding box c·ªßa b√°t
    const rawRect = elem.getBoundingClientRect();
    const paddingRatio = 0.15; // ch·ªânh nh·ªè ho·∫∑c l·ªõn h∆°n n·∫øu c·∫ßn
    const bowlRect = {
      left: rawRect.left + rawRect.width * paddingRatio,
      right: rawRect.right - rawRect.width * paddingRatio,
      top: rawRect.top + rawRect.height * paddingRatio,
      bottom: rawRect.bottom - rawRect.height * paddingRatio
    };

    const diceImgs = document.querySelectorAll(".dice");

    // Ki·ªÉm tra xem t√¢m c·ªßa t·ª´ng vi√™n x√∫c x·∫Øc c√≥ n·∫±m trong b√°t kh√¥ng
    let anyCovered = false;
    diceImgs.forEach(dice => {
      const diceRect = dice.getBoundingClientRect();
      const centerX = diceRect.left + diceRect.width / 2;
      const centerY = diceRect.top + diceRect.height / 2;

      const isInside =
        centerX >= bowlRect.left &&
        centerX <= bowlRect.right &&
        centerY >= bowlRect.top &&
        centerY <= bowlRect.bottom;

      if (isInside) anyCovered = true;
    });

    const messageElem = document.getElementById("message");

    if (!anyCovered) {
      // Kh√¥ng che t√¢m vi√™n n√†o ‚Üí hi·ªán k·∫øt qu·∫£
      let total = 0;
      diceImgs.forEach(dice => {
        const match = dice.src.match(/(\d)\.png$/);
        if (match) total += parseInt(match[1]);
      });

      const result = total > 10 ? "üé≤ T√†i" : "üé≤ X·ªâu";
      messageElem.textContent = result;

      // X√≥a class c≈©, th√™m class m·ªõi
      messageElem.classList.remove("tai", "xiu");
      messageElem.classList.add(result.includes("T√†i") ? "tai" : "xiu");

    } else {
      messageElem.textContent = "";
    }
  }



  function stopDrag() {
    isDragging = false;
    elem.style.cursor = "grab";

    // G·ª° event listener khi k·∫øt th√∫c k√©o
    document.removeEventListener("mousemove", onDrag);
    document.removeEventListener("mouseup", stopDrag);
    document.removeEventListener("touchmove", onDrag);
    document.removeEventListener("touchend", stopDrag);
  }
}



// H√†m cho ph√©p k√©o x√∫c s·∫Øc, gi·ªõi h·∫°n trong v√πng #dice-area
function makeDraggableDice(elem) {
  let offsetX = 0, offsetY = 0;
  let isDragging = false;

  elem.style.cursor = "grab";

  elem.addEventListener("mousedown", startDrag);
  elem.addEventListener("touchstart", startDrag, { passive: false });

  function startDrag(e) {
    e.preventDefault();
    isDragging = true;
    elem.style.cursor = "grabbing";

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    const clientY = e.touches ? e.touches[0].clientY : e.clientY;

    const rect = elem.getBoundingClientRect();
    offsetX = clientX - rect.left;
    offsetY = clientY - rect.top;

    document.addEventListener("mousemove", onDrag);
    document.addEventListener("mouseup", stopDrag);
    document.addEventListener("touchmove", onDrag, { passive: false });
    document.addEventListener("touchend", stopDrag);
  }

  function onDrag(e) {
    if (!isDragging) return;

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    const clientY = e.touches ? e.touches[0].clientY : e.clientY;

    const area = document.getElementById("dice-area");
    const rect = area.getBoundingClientRect();

    let x = clientX - rect.left - offsetX;
    let y = clientY - rect.top - offsetY;

    // Gi·ªõi h·∫°n k√©o trong v√πng #dice-area
    x = Math.max(0, Math.min(x, rect.width - elem.offsetWidth));
    y = Math.max(0, Math.min(y, rect.height - elem.offsetHeight));

    elem.style.position = "absolute";
    elem.style.left = `${x}px`;
    elem.style.top = `${y}px`;
  }

  function stopDrag() {
    isDragging = false;
    elem.style.cursor = "grab";
    document.removeEventListener("mousemove", onDrag);
    document.removeEventListener("mouseup", stopDrag);
    document.removeEventListener("touchmove", onDrag);
    document.removeEventListener("touchend", stopDrag);
  }
}


// Thanh tr∆∞·ª£t
const slider = document.getElementById("prob-slider");
const label = document.getElementById("prob-label");

slider.addEventListener("input", () => {
  label.textContent = `X√°c su·∫•t ra T√†i: ${slider.value}%`;
});

// T·∫°o x√∫c s·∫Øc theo thanh tr∆∞·ª£t
function generateDiceFromTotal(total) {
  while (true) {
    const a = Math.floor(Math.random() * 6) + 1;
    const b = Math.floor(Math.random() * 6) + 1;
    const c = total - a - b;
    if (c >= 1 && c <= 6) return [a, b, c];
  }
}


// L·∫ÆC ƒêI·ªÜN THO·∫†I ƒê·ªÇ L·∫ÆC X√öC X·∫ÆC
let lastShakeTime = 0;
const shakeThreshold = 25; // c√≥ th·ªÉ ch·ªânh l√™n 30 n·∫øu qu√° nh·∫°y
const shakeCooldown = 2000; // ms

function initShakeListener() {
  if (typeof DeviceMotionEvent.requestPermission === 'function') {
    DeviceMotionEvent.requestPermission()
      .then(state => {
        if (state === 'granted') {
          window.addEventListener('devicemotion', detectShake);
        } else {
          alert("Kh√¥ng ƒë∆∞·ª£c c·∫•p quy·ªÅn c·∫£m bi·∫øn chuy·ªÉn ƒë·ªông.");
        }
      })
      .catch(console.error);
  } else {
    window.addEventListener('devicemotion', detectShake);
  }
}

function detectShake(event) {
  const acc = event.accelerationIncludingGravity;
  if (!acc) return;

  const force = Math.abs(acc.x) + Math.abs(acc.y) + Math.abs(acc.z);
  const now = Date.now();

  if (force > shakeThreshold && now - lastShakeTime > shakeCooldown) {
    lastShakeTime = now;
    simulateRollByShake();
  }
}

function simulateRollByShake() {
  const button = document.getElementById("roll-button");
  const message = document.getElementById("message");

  if (button.disabled) return;

  button.disabled = true;
  message.textContent = "ƒêang l·∫Øc...";
  message.classList.remove("tai", "xiu");

  // G·ªçi h√†m g·ªëc r·ªìi b·∫≠t l·∫°i n√∫t
  setTimeout(() => {
    rollDice();
    setTimeout(() => {
      button.disabled = false;
    }, 1000); // th·ªùi gian kh·ªõp v·ªõi th·ªùi gian l·∫Øc trong rollDice
  }, 300); // ƒë·ªô tr·ªÖ ƒë·ªÉ ng∆∞·ªùi d√πng c·∫£m th·∫•y m∆∞·ª£t
}


let hasRequestedMotionPermission = false;

function handleUserRoll() {
  if (!hasRequestedMotionPermission && typeof DeviceMotionEvent?.requestPermission === 'function') {
    DeviceMotionEvent.requestPermission().then(state => {
      if (state === 'granted') {
        window.addEventListener('devicemotion', detectShake);
        hasRequestedMotionPermission = true;
      }
    }).catch(console.error);
  }

  // B·∫•m n√∫t c≈©ng s·∫Ω g·ªçi l·∫Øc
  const button = document.getElementById("roll-button");
  const message = document.getElementById("message");

  if (button.disabled) return;

  button.disabled = true;
  message.textContent = "ƒêang l·∫Øc...";
  message.classList.remove("tai", "xiu");

  setTimeout(() => {
    rollDice();
    setTimeout(() => {
      button.disabled = false;
    }, 1000);
  }, 300);
}
